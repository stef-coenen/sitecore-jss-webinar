{"version":3,"sources":["components/GraphQL-ConnectedDemo/query.graphql","components/ContentBlock/index.js","components/Footer/index.js","components/FreeText/index.js","lib/GraphQLData.js","components/GraphQL-ConnectedDemo/index.js","components/GraphQL-IntegratedDemo/index.js","components/GraphQL-Layout/index.js","components/Hero/index.js","components/JssCard/index.js","components/JssImage/index.js","components/Navigation/index.js","components/Section/index.js","components/Styleguide-Specimen.js","components/Styleguide-ComponentParams/index.js","components/Styleguide-CustomRouteType/index.js","components/Styleguide-FieldUsage-Checkbox/index.js","components/Styleguide-FieldUsage-ContentList/index.js","components/Styleguide-FieldUsage-Custom/index.js","components/Styleguide-FieldUsage-Date/index.js","components/Styleguide-FieldUsage-File/index.js","components/Styleguide-FieldUsage-Image/index.js","components/Styleguide-FieldUsage-ItemLink/index.js","components/Styleguide-FieldUsage-Link/index.js","components/Styleguide-FieldUsage-Number/index.js","components/Styleguide-FieldUsage-RichText/index.js","components/Styleguide-FieldUsage-Text/index.js","components/Styleguide-Layout/index.js","components/Styleguide-Layout-Reuse/index.js","components/Styleguide-Layout-Tabs/index.js","components/Styleguide-Layout-Tabs-Tab/index.js","components/Styleguide-Multilingual/index.js","components/Styleguide-RouteFields/index.js","components/Styleguide-Section/index.js","components/Styleguide-SitecoreContext/index.js","components/Welcome/index.js","temp/componentFactory.js","lib/SitecoreContextFactory.js","temp/config.js","Layout.js","NotFound.js","RouteHandler.js","AppRoot.js","index.js","lib/GraphQLClientFactory.js","i18n.js"],"names":["doc","kind","definitions","operation","name","value","variableDefinitions","variable","type","directives","selectionSet","selections","arguments","typeCondition","alias","fields","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","i","length","element","forEach","def","refs","Set","collectFragmentReferences","node","add","selection","module","exports","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","size","prevRefs","refName","has","childRef","op","push","oneQuery","components_ContentBlock","_ref","react_default","a","createElement","Fragment","dist","tag","className","field","heading","content","components_Footer","copyright","reactstrap_es","sm","src","alt","vertical","href","FreeText_FreeText","this","props","freeText","Component","GraphQL_ConnectedDemo","query","configuration","undefined","SitecoreRenderingWrapper","_React$Component","GraphQLData_classCallCheck","GraphQLData_possibleConstructorReturn","GraphQLData_getPrototypeOf","apply","key","Error","newConfiguration","options","variables","sitecoreContext","pageState","ssr","some","variableNames","map","filter","defs","extractVariableNames","datasource","rendering","dataSource","contextItem","itemId","innerQuery","resultProps","Object","assign","GQL","react_apollo_browser_umd","GraphQLData_inherits","displayName","concat","lib_GraphQLData","graphQLResult","connectedQuery","error","loading","toString","id","sample1","jss","sample2","text","url","target","definition","shared","pageTitle","children","child","Link","to","GraphQL_IntegratedDemo","_props$fields$data","data","GraphQL_Layout","disconnectedMode","components_Hero","media","backgroundImage","title","JssCard_JssCard","link","subtitle","JssImage_JssImage","image","Navigation_Navigation","Navigation","_this","Navigation_classCallCheck","Navigation_getPrototypeOf","call","toggleNavbar","bind","Navigation_assertThisInitialized","state","collapsed","setState","color","light","expand","onClick","isOpen","navbar","nav","inNavbar","caret","right","divider","Section_Section","params","classList","Styleguide_Specimen","_ref$fields","description","uid","replace","componentName","Styleguide_ComponentParams","_props$params","cssClass","columns","useCallToAction","columnsArray","Array","parseInt","Styleguide_ComponentParams_typeof","_","index","Styleguide_CustomRouteType","route","headline","author","Styleguide_FieldUsage_Checkbox","checkbox","Styleguide_FieldUsage_ContentList","_props$fields","sharedContentList","localContentList","listItem","textField","Styleguide_FieldUsage_Custom","customIntField","Styleguide_FieldUsage_Date","date","dateTime","render","toUTCString","toLocaleDateString","toLocaleString","Styleguide_FieldUsage_File","file","Styleguide_FieldUsage_Image","editable","imageParams","mw","mh","height","width","data-sample","srcSet","sizes","Styleguide_FieldUsage_ItemLink","sharedItemLink","localItemLink","Styleguide_FieldUsage_Link","externalLink","internalLink","emailLink","paramsLink","showLinkTextWithChildrenPresent","data-otherattributes","Styleguide_FieldUsage_Number","fieldValue","sample","Styleguide_FieldUsage_Number_typeof","Styleguide_FieldUsage_RichText","Styleguide_FieldUsage_Text","encode","Styleguide_Layout","sections","section","component","Styleguide_Layout_Reuse","renderEach","renderEmpty","components","Styleguide_Layout_Tabs_StyleguideLayoutTabs","StyleguideLayoutTabs","Styleguide_Layout_Tabs_classCallCheck","Styleguide_Layout_Tabs_getPrototypeOf","activeTabIndex","setActiveTab","Styleguide_Layout_Tabs_assertThisInitialized","_this2","_this$props","tabsPlaceholder","validTabIndex","isEditing","pageEditing","tab","tabsComponentWithPlaceholderInjected","placeholder","prop","Styleguide_Layout_Tabs","Styleguide_Layout_Tabs_Tab","Styleguide_Multilingual","es","t","i18n","language","Styleguide_RouteFields","Styleguide_Section","Styleguide_SitecoreContext","style","maxHeight","overflow","JSON","stringify","Welcome_Welcome","logoImage","defaultProps","components_Welcome","componentFactory_components","Map","componentFactory","get","set","SitecoreContextFactory","config","sitecoreApiKey","sitecoreApiHost","jssAppName","defaultLanguage","graphQLEndpointPath","graphQLEndpoint","src_Layout","Helmet_default","src_NotFound","ssrInitialState","RouteHandler_RouteHandler","RouteHandler","RouteHandler_classCallCheck","RouteHandler_possibleConstructorReturn","RouteHandler_getPrototypeOf","notFound","routeData","sitecore","setSitecoreContext","RouteHandler_objectSpread","context","window","componentIsMounted","languageIsChanging","updateLanguage","updateRouteData","sitecoreRoutePath","match","sitecoreRoute","startsWith","fetchOptions","layoutServiceConfig","host","querystringParams","sc_lang","sc_apikey","requestConfig","fetchRouteData","catch","console","getRouteData","lang","then","_this3","newLanguage","dist_es","changeLanguage","forceUpdate","previousProps","existingRoute","newRoute","location","_this$state","routePatterns","src_AppRoot","path","Router","graphQLClient","routeRenderFunction","client","contextFactory","Switch","routePattern","Route","ssrState","renderFunction","react_dom_default","__JSS_STATE__","hydrate","endpoint","initialCacheState","cache","dictionary","initialGraphQLState","APOLLO_STATE","src_graphQLClient","apollo_link_persisted_queries_lib","lib","uri","credentials","inMemoryCache","fragmentMatcher","introspectionQueryResultData","GraphQLFragmentTypes","ApolloClient","ssrMode","ssrForceFetchDelay","restore","Promise","resolve","reject","debug","lng","fallbackLng","load","useCookie","interpolation","escapeValue","resources","translation","use","init","dictionaryServicePath","backend","loadPath","parse","parsedData","phrases","lib_default","rootElement","document","getElementById","pathname","BrowserRouter"],"mappings":"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","file":"static/js/main.c32b40f4.chunk.js","sourcesContent":["\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ConnectedDemoQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"datasource\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"contextItem\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"datasource\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"datasource\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"GraphQLConnectedDemo\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sample1\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"jss\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sample2\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"jss\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"target\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"definition\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"shared\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}]}},{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"contextItem\"},\"name\":{\"kind\":\"Name\",\"value\":\"item\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"path\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"contextItem\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AppRoute\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"children\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"requirePresentation\"},\"value\":{\"kind\":\"BooleanValue\",\"value\":true}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AppRoute\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"jss\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"options\"},\"value\":{\"kind\":\"ObjectValue\",\"fields\":[{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"disableLanguageEmbedding\"},\"value\":{\"kind\":\"BooleanValue\",\"value\":true}}]}}],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":2030}};\n    doc.loc.source = {\"body\":\"# This file contains a GraphQL query that will be executed and the result provided to\\n# your JSS component. You can run this query in GraphiQL ($endpoint/ui) for a nice editing experience.\\n\\n# Note that we're executing _two queries_ (datasource and contextItem)\\n# within the context of the ConnectedDemoQuery _operation_. This makes it\\n# very efficient at gathering data from multiple sources.\\n\\nquery ConnectedDemoQuery($datasource: String!, $contextItem: String!) {\\n  # Datasource query\\n  # $datasource will always be set to the ID of the rendering's datasource item\\n  # (as long as the GraphQLData helper is used)\\n  datasource(value: $datasource) {\\n    id\\n    name\\n    # Strongly-typed querying on known templates is possible!\\n    ...on GraphQLConnectedDemo {\\n      # Single-line text field\\n      sample1 {\\n        # the 'jss' field is a JSON blob that represents the object that\\n        # should be passed to JSS field rendering helpers (i.e. text, image, link)\\n        jss\\n        value\\n      }\\n      # General Link field\\n      sample2 {\\n        jss\\n        # Structured querying of the field's values is possible\\n        text\\n        target\\n        url\\n        # Access to the template definition is possible\\n        definition {\\n          type\\n          shared\\n        }\\n      }\\n    }\\n  }\\n\\n  # Context/route item query\\n  # $contextItem will always be set to the ID of the current context item (the route item)\\n  # (as long as the GraphQLData helper is used)\\n  contextItem: item(path: $contextItem) {\\n    id\\n    # Get the page title from the app route template\\n    ...on AppRoute {\\n      pageTitle {\\n        value\\n      }\\n    }\\n\\n    # List the children of the current route\\n    children(requirePresentation: true) {\\n      id\\n      # typing fragments can be used anywhere!\\n      # so in this case, we're grabbing the 'pageTitle'\\n      # field on all child route items.\\n      ...on AppRoute {\\n        pageTitle {\\n          value\\n          jss\\n        }\\n      }\\n      url(options: { disableLanguageEmbedding: true })\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ConnectedDemoQuery\"] = oneQuery(doc, \"ConnectedDemoQuery\");\n        \n","import React from 'react';\nimport { Text, RichText } from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * A simple Content Block component, with a heading and rich text block.\n * This is the most basic building block of a content site, and the most basic\n * JSS component that's useful.\n */\nconst ContentBlock = ({ fields }) => (\n  <React.Fragment>\n    <Text tag=\"h2\" className=\"display-4\" field={fields.heading} />\n\n    <RichText className=\"contentDescription\" field={fields.content} />\n  </React.Fragment>\n);\n\nexport default ContentBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, Nav, NavItem, NavLink } from 'reactstrap';\n\nconst Footer = ({ fields, copyright }) => (\n    <footer className=\"footer\">\n        <Container className=\"footer-container\">\n            <Row>\n                <Col sm=\"2\">\n                    <div className=\"footer-image\">\n                        <img src=\"data/media/img/proxelo-logo-white.svg\" alt=\"Proxelo logo\" />\n                    </div>\n                </Col>\n\n                <Col sm=\"3\" className=\"ml-auto\">\n                    <Nav vertical>\n                        <NavItem>\n                            <NavLink href=\"/\">Home</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">Why we do</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">What we do</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">How we do it</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Col>\n                <Col sm=\"3\">\n                    <Nav vertical>\n                        <NavItem>\n                            <NavLink href=\"/\">About us</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">Careers</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">Legal</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Col>\n                <Col sm=\"3\">\n                    <Nav vertical>\n                        <NavItem>\n                            <NavLink href=\"/\">About us</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">Careers</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\">Legal</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Col>\n            </Row>\n        </Container>\n    </footer>\n);\n\nFooter.propTypes = {\n    fields: PropTypes.shape({})\n};\n\nexport default Footer;\n","import React from 'react';\nimport { RichText } from '@sitecore-jss/sitecore-jss-react';\nimport { Col } from 'reactstrap';\n\nexport default class FreeText extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n    render() {\n        return (\n            <Col>\n                <RichText field={this.props.fields.freeText} className=\"rich-text\" />\n            </Col>\n        );\n    }\n}\n","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport {\n  withSitecoreContext,\n  resetExperienceEditorChromes,\n} from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * Higher order component that abstracts common JSS + Apollo integration needs.\n *\n * This component works similar to react-apollo's graphql() HOC, but:\n * * Automatically injects $contextItem and $datasource GraphQL variable values, if the GraphQL declares usage of them\n * * Automatically disables execution of subscription queries when doing SSR\n * * Passes through any other props to its wrapped component\n *\n * @param {*} query The GraphQL AST to execute (should go through graphql-tag, no strings)\n * @param {*} configuration Values passed in are shipped to react-apollo configuration (https://www.apollographql.com/docs/react/basics/setup.html#graphql-config)\n */\nfunction GraphQLData(query, configuration = {}) {\n  return function wrapComponent(Component) {\n    class SitecoreRenderingWrapper extends React.Component {\n      static displayName = `JSSGraphQLComponent(${Component.displayName ||\n        Component.name ||\n        'Component'})`;\n\n      render() {\n        if (!query) {\n          throw new Error(\n            'query was falsy in GraphQLData. It should be a GraphQL query from graphql-tag. Perhaps missing graphql-tag/loader?'\n          );\n        }\n\n        const newConfiguration = { ...configuration };\n\n        if (!newConfiguration.name) newConfiguration.name = 'data';\n\n        // ensure variables object exists\n        newConfiguration.options = newConfiguration.options || {};\n        newConfiguration.options.variables = newConfiguration.options.variables || {};\n\n        // if we're in experience editor or preview we need to disable SSR of GraphQL queries\n        // because SSR queries are made unauthenticated, so they would have normal mode data = bad\n        if (this.props.sitecoreContext && this.props.sitecoreContext.pageState !== 'normal') {\n          newConfiguration.options.ssr = false;\n        } else if (\n          query.definitions.some(\n            (def) => def.kind === 'OperationDefinition' && def.operation === 'subscription'\n          )\n        ) {\n          // if the document includes any subscriptions, we also disable SSR as this hangs the SSR process\n          // not to mention being quite silly to SSR when they're reactive\n          newConfiguration.options.ssr = false;\n        }\n\n        // find all variable definitions in the GraphQL query, so we can send only ones we're using\n        const variableNames = extractVariableNames(query);\n\n        // set the datasource variable, if we're using it\n        if (variableNames.datasource && this.props.rendering && this.props.rendering.dataSource) {\n          newConfiguration.options.variables.datasource = this.props.rendering.dataSource;\n        }\n\n        // set the contextItem variable, if we're using it\n        if (\n          variableNames.contextItem &&\n          this.props.sitecoreContext &&\n          this.props.sitecoreContext.itemId\n        ) {\n          newConfiguration.options.variables.contextItem = this.props.sitecoreContext.itemId;\n        }\n\n        // build the props processing function that will set the result object to the name\n        newConfiguration.props = (props) => {\n          const innerQuery = props[newConfiguration.name];\n\n          let resultProps = {};\n\n          resultProps[newConfiguration.name] = innerQuery;\n\n          // run a user-specified props function too if one exists\n          if (configuration.props)\n            resultProps = Object.assign(resultProps, configuration.props(props));\n\n          return resultProps;\n        };\n\n        const GQL = graphql(query, newConfiguration)(Component);\n        return <GQL {...this.props} />;\n      }\n\n      // eslint-disable-next-line class-methods-use-this\n      componentDidUpdate() {\n        resetExperienceEditorChromes();\n      }\n    }\n\n    return withSitecoreContext()(SitecoreRenderingWrapper);\n  };\n}\n\nfunction extractVariableNames(query) {\n  const variableNames = {};\n  query.definitions\n    .map((def) => def.variableDefinitions)\n    .filter((def) => def)\n    .forEach((defs) =>\n      defs.forEach((def) => {\n        if (def.kind && def.kind === 'VariableDefinition') {\n          variableNames[def.variable.name.value] = true;\n        }\n      })\n    );\n\n  return variableNames;\n}\n\nexport default GraphQLData;\n","import React from 'react';\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport GraphQLData from '../../lib/GraphQLData';\nimport { ConnectedDemoQuery } from './query.graphql';\n\nconst GraphQLConnectedDemo = (props) => {\n  const graphQLResult = props.connectedQuery;\n\n  // Async loading and error handling\n  // Remember to never return null from a JSS component when loading,\n  // this will break Experience Editor.\n  const { error, loading } = graphQLResult;\n\n  // Query results load in using the name of their root field (see query.graphql)\n  const { datasource, contextItem } = graphQLResult;\n\n  return (\n    <div>\n      <h2>GraphQL Connected Demo</h2>\n\n      <p>\n        Connected GraphQL executes GraphQL queries directly against the Sitecore GraphQL endpoint.\n        You can review the query execution in the browser devtools network tab. Note that Apollo\n        Client maintains a query cache - so the same query will not execute twice (i.e. after route\n        changes) unless either the page is refreshed, or the <em>fetch policy</em> is set to not use\n        the cache. Consult the Apollo documentation for details.\n      </p>\n\n      {loading && <p className=\"alert alert-info\">GraphQL query is executing...</p>}\n      {error && <p className=\"alert alert-danger\">GraphQL query error: {error.toString()}</p>}\n      {datasource && (\n        <div>\n          <h4>Datasource Item (via Connected GraphQL)</h4>\n          id: {datasource.id}\n          <br />\n          name: {datasource.name}\n          <br />\n          sample1: {datasource.sample1.value}\n          <br />\n          sample1 (editable): <Text field={datasource.sample1.jss} />\n          <br />\n          sample2:<br />\n          <ul>\n            <li>text: {datasource.sample2.text}</li>\n            <li>url: {datasource.sample2.url}</li>\n            <li>target: {datasource.sample2.target}</li>\n            <li>\n              editable: <Link field={datasource.sample2.jss} />\n            </li>\n            <li>field type: {datasource.sample2.definition.type}</li>\n            <li>field is shared?: {datasource.sample2.definition.shared.toString()}</li>\n          </ul>\n        </div>\n      )}\n      {contextItem && (\n        <div>\n          <h4>Route Item (via Connected GraphQL)</h4>\n          id: {contextItem.id}\n          <br />\n          page title: {contextItem.pageTitle.value}\n          <br />\n          children:\n          <ul>\n            {contextItem.children.map((child) => (\n              <li key={child.id}>\n                <RouterLink to={child.url}>{child.pageTitle.value}</RouterLink>&nbsp; (editable\n                title too! <Text field={child.pageTitle.jss} />)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// compose() (from react-apollo) can be used when you need more than one GraphQL query\n// for a single query, e.g. `compose(GraphQLData(q1), GraphQLData(q2))(component)`\nexport default GraphQLData(ConnectedDemoQuery, { name: 'connectedQuery' })(GraphQLConnectedDemo);\n","import React from 'react';\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst GraphQLIntegratedDemo = (props) => {\n  // Query results in integrated GraphQL replace the normal `fields` data\n  // i.e. with { data, }\n  const { datasource, contextItem } = props.fields.data;\n\n  return (\n    <div>\n      <h2>GraphQL Integrated Demo</h2>\n\n      <p>\n        Integrated GraphQL executes GraphQL queries within the Layout Service endpoint, and merges\n        the query results into the Layout Service result JSON. The query results can be seen by\n        inspecting the Layout Service response in the browser devtools network tab.\n      </p>\n\n      {datasource && (\n        <div>\n          <h4>Datasource Item (via Integrated GraphQL)</h4>\n          id: {datasource.id}\n          <br />\n          name: {datasource.name}\n          <br />\n          sample1: {datasource.sample1.value}\n          <br />\n          sample1 (editable): <Text field={datasource.sample1.jss} />\n          <br />\n          sample2:<br />\n          <ul>\n            <li>text: {datasource.sample2.text}</li>\n            <li>url: {datasource.sample2.url}</li>\n            <li>target: {datasource.sample2.target}</li>\n            <li>\n              editable: <Link field={datasource.sample2.jss} />\n            </li>\n            <li>field type: {datasource.sample2.definition.type}</li>\n            <li>field is shared?: {datasource.sample2.definition.shared.toString()}</li>\n          </ul>\n        </div>\n      )}\n      {contextItem && (\n        <div>\n          <h4>Route Item (via Integrated GraphQL)</h4>\n          id: {contextItem.id}\n          <br />\n          page title: {contextItem.pageTitle.value}\n          <br />\n          children:\n          <ul>\n            {contextItem.children.map((child) => (\n              <li key={child.id}>\n                <RouterLink to={child.url}>{child.pageTitle.value}</RouterLink>&nbsp; (editable\n                title too! <Text field={child.pageTitle.jss} />)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GraphQLIntegratedDemo;\n","import React from 'react';\nimport { Placeholder, withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\n\nconst GraphQLLayout = ({ sitecoreContext, rendering }) => {\n  const disconnectedMode = sitecoreContext.itemId === 'available-in-connected-mode';\n\n  return (\n    <div>\n      {disconnectedMode && (\n        <React.Fragment>\n          <p>\n            This app is running in disconnected mode. GraphQL requires connected mode, headless\n            connected mode, or integrated mode to work.\n          </p>\n          <p>\n            Libraries such as <code>graphql-tools</code> can provide GraphQL API mocking\n            capabilities, which could enable disconnected GraphQL. This is not supported out of the\n            box, however.\n          </p>\n          <p>\n            To view the GraphQL samples, restart the app using <code>jss start:connected</code>&nbsp;\n            or deploy the app to Sitecore to run in integrated mode per the JSS documentation.\n          </p>\n        </React.Fragment>\n      )}\n      {!disconnectedMode && <Placeholder name=\"jss-graphql-layout\" rendering={rendering} />}\n    </div>\n  );\n};\n\nexport default withSitecoreContext()(GraphQLLayout);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Image } from '@sitecore-jss/sitecore-jss-react';\nimport { Container } from 'reactstrap';\n\nconst Hero = ({ fields, copyright }) => (\n    <header className=\"hero dark-bg\">\n        <Image className=\"hero-image\" media={fields.backgroundImage} />\n        <Container className=\"hero-container\">\n            <Text tag=\"h1\" className=\"hero-title\" field={fields.title} />\n        </Container>\n    </header>\n);\n\nHero.propTypes = {\n    fields: PropTypes.shape({\n        title: PropTypes.shape({\n            value: PropTypes.string,\n            editable: PropTypes.string\n        }),\n        backgroundImage: PropTypes.shape({\n            value: PropTypes.shape({\n                src: PropTypes.string\n            }),\n            editable: PropTypes.string\n        })\n    })\n};\n\nexport default Hero;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Image, Link } from '@sitecore-jss/sitecore-jss-react';\nimport { Col, Card, CardBody } from 'reactstrap';\n\nexport default class JssCard extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n    render() {\n        return (\n            <Col>\n                <Card>\n                    <Link field={this.props.fields.link} className=\"card-link\">\n                        <div className=\"card-img-top\">\n                            <Image media={this.props.fields.backgroundImage} />\n                        </div>\n\n                        <CardBody className=\"card-body-overlap\">\n                            <Text tag=\"h3\" className=\"card-title\" field={this.props.fields.title} />\n                            <Text\n                                tag=\"h4\"\n                                className=\"card-subtitle\"\n                                field={this.props.fields.subtitle}\n                            />\n                            <Text tag=\"p\" className=\"card-text\" field={this.props.fields.text} />\n                        </CardBody>\n                    </Link>\n                </Card>\n            </Col>\n        );\n    }\n}\n\nJssCard.propTypes = {\n    fields: PropTypes.shape({\n        title: PropTypes.shape({\n            value: PropTypes.string,\n            editable: PropTypes.string\n        }),\n        backgroundImage: PropTypes.shape({\n            value: PropTypes.shape({\n                src: PropTypes.string\n            }),\n            editable: PropTypes.string\n        })\n    })\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Image } from '@sitecore-jss/sitecore-jss-react';\nimport { Col } from 'reactstrap';\n\nexport default class JssImage extends React.Component {\n    // constructor(props) {\n    //   super(props);\n    // }\n    render() {\n        return (\n            <Col>\n                <Image media={this.props.fields.image} />\n            </Col>\n        );\n    }\n}\n\nJssImage.propTypes = {\n    fields: PropTypes.shape({\n        image: PropTypes.shape({\n            value: PropTypes.shape({\n                src: PropTypes.string\n            }),\n            editable: PropTypes.string\n        })\n    })\n};\n","import React from 'react';\nimport {\n    Container,\n    Navbar,\n    NavbarBrand,\n    NavbarToggler,\n    Collapse,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap';\n\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true\n        };\n    }\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n    render() {\n        return (\n            <section className=\"navigation\">\n                <Container>\n                    <Navbar color=\"faded\" light expand=\"md\">\n                        <NavbarBrand href=\"/\" className=\"mr-auto\">\n                            <img src=\"data/media/img/proxelo-logo-long.svg\" alt=\"Proxelo logo\" />\n                        </NavbarBrand>\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n                        <Collapse isOpen={!this.state.collapsed} navbar>\n                            <Nav navbar className=\"ml-auto\">\n                                <NavItem>\n                                    <NavLink href=\"/components/\">Components</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"https://github.com/reactstrap/reactstrap\">\n                                        GitHub\n                                    </NavLink>\n                                </NavItem>\n                                <UncontrolledDropdown nav inNavbar>\n                                    <DropdownToggle nav caret>\n                                        Options\n                                    </DropdownToggle>\n                                    <DropdownMenu right>\n                                        <DropdownItem>Option 1</DropdownItem>\n                                        <DropdownItem>Option 2</DropdownItem>\n                                        <DropdownItem divider />\n                                        <DropdownItem>Reset</DropdownItem>\n                                    </DropdownMenu>\n                                </UncontrolledDropdown>\n                            </Nav>\n                        </Collapse>\n                    </Navbar>\n                </Container>\n            </section>\n        );\n    }\n}\n","import React from 'react';\nimport { Container, Row } from 'reactstrap';\nimport { Placeholder, Text } from '@sitecore-jss/sitecore-jss-react';\n\nexport default class Section extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n    render() {\n        return (\n            <section className={this.props.params.classList}>\n                <Container>\n                    <Text tag=\"h2\" className=\"section-title\" field={this.props.fields.title} />\n                    <Row>\n                        <Placeholder name=\"jss-section\" rendering={this.props.rendering} />\n                    </Row>\n                </Container>\n            </section>\n        );\n    }\n}\n","import React from 'react';\nimport { Text, RichText } from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * Helper component that displays explanatory information and where to find the definitions\n * of styleguide specimens.\n */\nconst StyleguideSpecimen = ({ fields: { heading, description }, children, rendering }) => (\n  <div className=\"pt-3\" id={`i${rendering.uid.replace(/[{}]/g, '')}`}>\n    <Text tag=\"h4\" field={heading} />\n    <RichText field={description} />\n\n    <p>\n      <small>\n        Implementation: <code>/src/components/{rendering.componentName}/index.js</code>\n        <br />\n        Definition:{' '}\n        <code>/sitecore/definitions/components/{rendering.componentName}.sitecore.js</code>\n      </small>\n    </p>\n    <div className=\"border p-2\">{children}</div>\n  </div>\n);\n\nexport default StyleguideSpecimen;\n","import React from 'react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\nconst StyleguideComponentParams = (props) => {\n  // props.params (i.e. props.params.cssClass without destructuring) contains the component's params\n  const { cssClass, columns, useCallToAction } = props.params;\n\n  const columnsArray = columns && [...Array(parseInt(columns))];\n\n  return (\n    <StyleguideSpecimen {...props}>\n      <p className={cssClass}>\n        The CSS class of this paragraph (<code>{cssClass}</code>) is set using a param\n      </p>\n      <div>\n        {/* Note that all params come in as string values, like this boolean-like param here: */}\n        useCallToAction param: <code>{useCallToAction}</code>\n        <br />\n        param type: <code>{typeof useCallToAction}</code>\n        {useCallToAction === 'true' && (\n          <div className=\"alert alert-info\">the call to action is shown</div>\n        )}\n      </div>\n      <p>columns param: {columns}</p>\n      <div className=\"row\">\n        {columnsArray &&\n          columnsArray.map((_, index) => (\n            <div key={`col-${index}`} className=\"col-sm\">\n              Column {index}\n            </div>\n          ))}\n      </div>\n    </StyleguideSpecimen>\n  );\n};\n\nexport default StyleguideComponentParams;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withSitecoreContext, Text, RichText } from '@sitecore-jss/sitecore-jss-react';\n\n// this fancy destructure syntax is essentially equivalent to\n// const fields = props.sitecoreContext.route.fields\nconst StyleguideCustomRouteType = ({\n  sitecoreContext: {\n    route: { fields },\n  },\n}) => (\n  <div>\n    <Text tag=\"h3\" field={fields.headline} />\n\n    <p>\n      <em>\n        By <Text field={fields.author} />\n      </em>\n    </p>\n\n    <RichText field={fields.content} />\n\n    <Link to=\"/styleguide\">Return to the Styleguide</Link>\n  </div>\n);\n\n// withSitecoreContext() is the magical glue that gives you route-level context access\n// see the context examples in the styleguide for more details.\nexport default withSitecoreContext()(StyleguideCustomRouteType);\n","import React from 'react';\nimport { getFieldValue } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Checkbox (boolean) content field within JSS.\n */\nconst StyleguideFieldUsageCheckbox = (props) => (\n  <StyleguideSpecimen {...props}>\n    {/* Checkbox fields do not have the ability to be inline edited, so they are directly accessed via their value: */}\n    <ul>\n      {/*\n        The getFieldValue helper allows safely extracting a field value that could be undefined,\n        without needing to check that props.fields or props.fields.checkbox are traversable,\n        and allowing the specification of an optional default value (default is undefined if unspecified).\n       */}\n      {props.fields &&\n        props.fields.checkbox &&\n        props.fields.checkbox.value && (\n          <li>\n            <code>checkbox</code> is true\n          </li>\n        )}\n      {!props.fields ||\n        !props.fields.checkbox ||\n        (!props.fields.checkbox.value && (\n          <li>\n            <code>checkbox</code> is false\n          </li>\n        ))}\n      {getFieldValue(props.fields, 'checkbox2', false) && (\n        <li>\n          <code>checkbox2</code> is true\n        </li>\n      )}\n      {!getFieldValue(props.fields, 'checkbox2', false) && (\n        <li>\n          <code>checkbox2</code> is false\n        </li>\n      )}\n    </ul>\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageCheckbox;\n","import React from 'react';\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Content List field type within JSS.\n * Content Lists are references to 0..n other content items.\n * In Sitecore terms, this maps by default to a Treelist field.\n */\nconst StyleguideFieldUsageContentList = (props) => {\n  const { sharedContentList, localContentList } = props.fields;\n\n  return (\n    <StyleguideSpecimen {...props}>\n      <h5>Shared Content List</h5>\n      {/*\n      Content list fields are returned with their value as an array of the referenced items.\n      So we can use the .map() array function to traverse them. Ensure a `key` attribute is set\n      on each element to make React's DOM updating happy:\n     */}\n      {sharedContentList &&\n        sharedContentList.map((listItem, index) => (\n          <div key={`sharedListItem-${index}`}>\n            <h6>{listItem.displayName}</h6>\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\n            <p>\n              Field: <Text field={listItem.fields.textField} />\n            </p>\n          </div>\n        ))}\n\n      <h5>Local Content List</h5>\n      {localContentList &&\n        localContentList.map((listItem, index) => (\n          <div key={`localListItem-${index}`}>\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\n            <p>\n              Field: <Text field={listItem.fields.textField} />\n            </p>\n          </div>\n        ))}\n    </StyleguideSpecimen>\n  );\n};\n\nexport default StyleguideFieldUsageContentList;\n","import React from 'react';\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a custom content field type within JSS.\n * See /sitecore/definitions/components/Styleguide-FieldUsage-Custom.sitecore.js\n * for the definition of the structure of the custom field. This code is just for display.\n */\nconst StyleguideFieldUsageCustom = (props) => (\n  <StyleguideSpecimen {...props}>\n    {/* Because the integer field is essentially text, we can render it with the Text helper */}\n    <Text field={props.fields.customIntField} />\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageCustom;\n","import React from 'react';\nimport { DateField } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of date and time content field types within JSS.\n */\nconst StyleguideFieldUsageDate = (props) => {\n  return (\n    <StyleguideSpecimen {...props}>\n      <ul>\n        <li>\n          Date helper: <DateField field={props.fields.date} />\n        </li>\n        <li>\n          Date helper (datetime): <DateField field={props.fields.dateTime} />\n        </li>\n        <li>\n          UTC Date string:&nbsp;\n          {/*\n            Date helper supports a render props API to give you direct access to the JS Date object for formatting.\n            IMPORTANT: the render prop is ignored when in Experience Editor mode to support inline editing.\n          */}\n          <DateField field={props.fields.date} render={(date) => date.toUTCString()} />\n        </li>\n        <li>\n          Localized Date string (local timezone):&nbsp;\n          <DateField field={props.fields.date} render={(date) => date.toLocaleDateString()} />\n        </li>\n        <li>\n          Localized DateTime string (local timezone):&nbsp;\n          {/* React components can also be returned from the render props for wrapping */}\n          <DateField\n            field={props.fields.dateTime}\n            render={(date) => <em>{date.toLocaleString()}</em>}\n          />\n        </li>\n      </ul>\n    </StyleguideSpecimen>\n  );\n};\n\nexport default StyleguideFieldUsageDate;\n","import React from 'react';\nimport { File } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a File content field within JSS.\n * File types are stored within Sitecore's Media Library data, and can be edited.\n */\nconst StyleguideFieldUsageFile = (props) => (\n  <StyleguideSpecimen {...props}>\n    {/* Renders a file link */}\n    <File field={props.fields.file} />\n    <br />\n\n    {/* Renders a file link with a custom body and opening in a new tab */}\n    <File field={props.fields.file} target=\"_blank\">\n      Custom link body\n    </File>\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageFile;\n","import React from 'react';\nimport { Image } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of an Image content field within JSS.\n * Image field data is uploaded into the Sitecore Media Library.\n */\nconst StyleguideFieldUsageImage = (props) => (\n  <StyleguideSpecimen {...props}>\n    <p>Plain image</p>\n    <Image media={props.fields.sample1} />\n\n    {/*\n      Advanced image usage example\n      editable: controls whether image can be edited in Sitecore Experience Editor\n      imageParams: parameters that are passed to Sitecore to perform server-side resizing of the image.\n        Sample rescales image to max 100x50 dimensions on the server, respecting aspect ratio\n        IMPORTANT: imageParams must be whitelisted for resizing to occur. See /sitecore/config/*.config (search for 'allowedMediaParams')\n      any other attributes: pass through to img tag\n    */}\n    <p>Advanced image (not editable)</p>\n    <Image\n      media={props.fields.sample2}\n      editable={false}\n      imageParams={{ mw: 100, mh: 50 }}\n      height=\"50\"\n      width=\"94\"\n      data-sample=\"other-attributes-pass-through\"\n    />\n\n    {/*\n      Srcset adaptive image usage example\n      Adaptive srcsets are supported using Sitecore server-side resizing.\n      The `srcSet` can use Sitecore image resizing parameters (i.e. w, h, mw, mh).\n      Sample create a srcset using two sizes (server resizing), 300 and 100px max widths, respecting aspect ratio.\n      IMPORTANT: srcSet params must be whitelisted for adaptive resizing to occur. See /sitecore/config/*.config (search for 'allowedMediaParams')\n    */}\n    <p>Srcset responsive image</p>\n    <Image\n      media={props.fields.sample2}\n      srcSet={[{ mw: 300 }, { mw: 100 }]}\n      sizes=\"(min-width: 960px) 300px, 100px\"\n      className=\"img-fluid\"\n    />\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageImage;\n","import React from 'react';\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Content Link content field within JSS.\n * Content links are a reference to a single other piece of content.\n */\nconst StyleguideFieldUsageItemLink = (props) => {\n  const { sharedItemLink, localItemLink } = props.fields;\n\n  return (\n    <StyleguideSpecimen {...props}>\n      <h5>Shared Item Link</h5>\n      {/*\n        Item link fields are returned with their value as the referenced item value.\n      */}\n      {sharedItemLink && (\n        <div>\n          <h5>{sharedItemLink.displayName}</h5>\n          {/* The referenced item's fields can be rendered and edited using normal helper components: */}\n          <p>\n            Field: <Text field={sharedItemLink.fields.textField} />\n          </p>\n        </div>\n      )}\n\n      <h5>Local Item Link</h5>\n      {localItemLink && (\n        <div>\n          <p>\n            Field: <Text field={localItemLink.fields.textField} />\n          </p>\n        </div>\n      )}\n    </StyleguideSpecimen>\n  );\n};\n\nexport default StyleguideFieldUsageItemLink;\n","import React from 'react';\nimport { Link } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a General Link (hyperlink) content field within JSS.\n */\nconst StyleguideFieldUsageLink = (props) => (\n  <StyleguideSpecimen {...props}>\n    External link:&nbsp;\n    <Link field={props.fields.externalLink} />\n    <br />\n    Internal link:&nbsp;\n    <Link field={props.fields.internalLink}>\n      <em>HTML</em> or other components can be used within link renderers, for example links to\n      images.\n    </Link>\n    <br />\n    Email link:&nbsp;\n    <Link field={props.fields.emailLink} />\n    <br />\n    All possible content params link:&nbsp;\n    <Link field={props.fields.paramsLink} />\n    <br />\n    The link component accepts params of its own:&nbsp;\n    <Link\n      field={props.fields.externalLink}\n      showLinkTextWithChildrenPresent=\"true\"\n      className=\"font-weight-bold\"\n      data-otherattributes=\"pass-through-to-anchor-tag\"\n    />\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageLink;\n","import React from 'react';\nimport { Text, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Number (decimal) content field within JSS.\n */\nconst StyleguideFieldUsageText = (props) => {\n  const fieldValue = getFieldValue(props.fields, 'sample');\n\n  return (\n    <StyleguideSpecimen {...props}>\n      {/* Basic emission of a number field for editing can be done with the <Text> component. */}\n      <Text field={props.fields.sample} />\n\n      {/* Direct access to the value, which is a JS number, is also supported. */}\n      <p>\n        JS value type: {typeof fieldValue}\n        <br />\n        JS value: {fieldValue}\n      </p>\n    </StyleguideSpecimen>\n  );\n};\n\nexport default StyleguideFieldUsageText;\n","import React from 'react';\nimport { RichText } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Rich Text (HTML) content field within JSS.\n */\nconst StyleguideFieldUsageRichText = (props) => (\n  <StyleguideSpecimen {...props}>\n    {/* Basic use of a rich text field. Wraps in a <div>. */}\n    <RichText field={props.fields.sample} />\n\n    {/* Advanced usage of rich text field. Specifies a custom wrapper tag, turns off Sitecore editing, and has a CSS class on the wrapper */}\n    <RichText\n      field={props.fields.sample2}\n      tag=\"section\"\n      editable={false}\n      className=\"text-center\"\n      data-sample=\"other-attributes-pass-through\"\n    />\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageRichText;\n","import React from 'react';\nimport { Text, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates usage of a Text content field within JSS.\n * Text fields are HTML encoded by default.\n */\nconst StyleguideFieldUsageText = (props) => (\n  <StyleguideSpecimen {...props}>\n    {/* Basic use of a text field. No wrapper. */}\n    <Text field={props.fields.sample} />\n\n    {/* Advanced usage of text field. Specifies a wrapper tag, turns off Sitecore editing, supports raw HTML, and has a CSS class on the wrapper */}\n    <Text\n      field={props.fields.sample2}\n      tag=\"section\"\n      editable={false}\n      encode={false}\n      className=\"font-weight-bold\"\n      data-sample=\"other-attributes-pass-through\"\n    />\n\n    {/*\n      Use this API when you need direct programmatic access to a field as a variable.\n      Note: editing such a value in Experience Editor is not possible, and direct field\n      editing must be used to edit a value emitted like this (the pencil icon when the rendering\n      is selected in xEditor)\n    */}\n    <div>Raw value (not editable): {getFieldValue(props.fields, 'sample')}</div>\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideFieldUsageText;\n","import React from 'react';\nimport { Placeholder, getChildPlaceholder, getFieldValue } from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * The main layout (columns) of the styleguide.\n * Navigation is automatically generated based on the components added to the layout,\n * and does not need to be manually maintained.\n */\nconst StyleguideLayout = (props) => {\n  // this code reads the components in the child placeholders of this component,\n  // and projects them into the left navigation column for the styleguide\n  const sections = getChildPlaceholder(props.rendering, 'jss-styleguide-layout')\n    .filter((section) => getFieldValue(section, 'heading'))\n    .map((section) => ({\n      heading: getFieldValue(section, 'heading'),\n      id: `i${section.uid.replace(/[{}]/g, '')}`,\n      children: getChildPlaceholder(section, 'jss-styleguide-section')\n        .filter((component) => getFieldValue(component, 'heading'))\n        .map((component) => ({\n          heading: getFieldValue(component, 'heading'),\n          id: `i${component.uid.replace(/[{}]/g, '')}`,\n        })),\n    }))\n    .map((section) => (\n      <nav key={section.heading} className=\"nav flex-column pt-2\">\n        <a href={`#${section.id}`} className=\"nav-item font-weight-bold\">\n          {section.heading}\n        </a>\n        {section.children && (\n          <nav className=\"nav flex-column\">\n            {section.children.map(\n              (child) =>\n                child.heading && (\n                  <a key={child.id} href={`#${child.id}`}>\n                    {child.heading}\n                  </a>\n                )\n            )}\n          </nav>\n        )}\n      </nav>\n    ));\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-8 col-lg-10\">\n        <Placeholder name=\"jss-styleguide-layout\" rendering={props.rendering} />\n      </div>\n      <div className=\"col-sm-4 col-lg-2 order-sm-first pt-2\">{sections}</div>\n    </div>\n  );\n};\n\nexport default StyleguideLayout;\n","import React from 'react';\nimport { Placeholder } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates how to reuse content within JSS. See /data/routes/styleguide/en.yml\n * for the reused content definition sample. This component also demonstrates how to use\n * the Placeholder component's render props API to wrap all components in the placeholder\n * in a column tag (thus creating a horizontally laid out placeholder)\n */\nconst StyleguideLayoutReuse = (props) => (\n  <StyleguideSpecimen {...props}>\n    <div className=\"row\">\n      {/*\n        This placeholder is using _render props_ to enable customizing the markup for each component within.\n        In this case, it's placing each component in its own column of a flexbox layout - giving an n-up columnar layout.\n        The component itself does not need to know it's living in a columnar layout.\n\n        There are three render props available:\n        renderEach - called once for each content component\n          Sitecore Experience Editor markup is automatically rendered in between content components when present\n        renderEmpty - called when the placeholder contains no content components. Can be used to wrap the Sitecore EE empty placeholder\n          markup in something that's visually correct, like here where we need to wrap it in a column div to make it selectable.\n        render - called once and passed _all_ components in the placeholder. Allows custom iteration. EE code markup must be accounted for.\n\n        Generally speaking stick to renderEach and renderEmpty unless doing something really custom.\n       */}\n      <Placeholder\n        rendering={props.rendering}\n        name=\"jss-reuse-example\"\n        renderEach={(component, index) => (\n          <div className=\"col-sm\" key={index}>\n            {component}\n          </div>\n        )}\n        renderEmpty={(components) => <div className=\"col-sm\">{components}</div>}\n      />\n    </div>\n  </StyleguideSpecimen>\n);\n\nexport default StyleguideLayoutReuse;\n","import React from 'react';\nimport { withPlaceholder, withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates advanced component techniques in JSS.\n * This example implements a simple-looking tabs component.\n * Each tab is itself a child component added to a placeholder defined on the tabs component.\n * The tab component introspects its child components to render the tab headings (i.e. the tab children render partial content in two places).\n * When this component is edited in Sitecore Experience Editor, the tabbing behavior is turned off and each tab stacks on top of each other\n * for easy inline editing.\n */\nclass StyleguideLayoutTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTabIndex: 0,\n    };\n\n    this.setActiveTab = this.setActiveTab.bind(this);\n  }\n\n  setActiveTab(index) {\n    this.setState({ activeTabIndex: index });\n  }\n\n  render() {\n    const { tabsPlaceholder, sitecoreContext } = this.props;\n\n    let validTabIndex = 0;\n    const isEditing = sitecoreContext && sitecoreContext.pageEditing;\n\n    return (\n      <StyleguideSpecimen {...this.props}>\n        <ul className=\"nav nav-tabs\">\n          {/*\n            When the page is editing, we hide the tab headings, because they are not updated when xEditor adds or removes a tab rendering.\n            Instead, we show the tab header inline with the tab contents (see Styleguide-Layout-Tabs-Tab).\n          */}\n          {!isEditing &&\n            (tabsPlaceholder || [])\n              .filter((tab) => tab.props && tab.props.fields)\n              .map((tab, index) => (\n                <li className=\"nav-item\" key={`tab${index}`}>\n                  <a\n                    className={`nav-link ${index === this.state.activeTabIndex ? 'active' : null}`}\n                    onClick={() => this.setActiveTab(index)}\n                    href=\"#t\"\n                  >\n                    <Text field={tab.props.fields.title} />\n                  </a>\n                </li>\n              ))}\n        </ul>\n        <div className=\"p-3 border-left border-right border-bottom\">\n          {(tabsPlaceholder || []).map((tab, index) => {\n            const isValid = tab.props && tab.props.fields;\n\n            // allow experience editor markup components to render\n            if (!isValid && isEditing) return tab;\n\n            validTabIndex += 1;\n\n            // we render the tab either if it's active - or we're editing,\n            // in which case we stack all tabs for visual editing\n            if (this.state.activeTabIndex === validTabIndex - 1 || isEditing) {\n              return tab;\n            }\n\n            return null;\n          })}\n        </div>\n      </StyleguideSpecimen>\n    );\n  }\n}\n\n// This is a _higher order component_ that will wrap our component and inject placeholder\n// data into it as a prop (in this case, props.tabsPlaceholder).\n// this another option compared to using the <Placeholder> component;\n// in this case, chosen because we primarily need access to the _data_\n// of the placeholder.\nconst tabsComponentWithPlaceholderInjected = withPlaceholder({\n  placeholder: 'jss-tabs',\n  prop: 'tabsPlaceholder',\n})(StyleguideLayoutTabs);\n\n// We need to know if experience editor is active, to disable the dynamic tab behavior for editing.\n// Using the same technique as injecting the placeholder, we wrap the component again to inject the\n// `sitecoreContext` prop.\nconst tabsWithPlaceholderAndSitecoreContext = withSitecoreContext()(\n  tabsComponentWithPlaceholderInjected\n);\n\nexport default tabsWithPlaceholderAndSitecoreContext;\n","import React from 'react';\nimport { Text, RichText, withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * This is a single tab within the tabs sample component. These are added to the tabs placeholder.\n * This component demonstrates conditionally altering rendering when in the Sitecore Experience Editor to improve\n * author experience.\n */\nconst StyleguideLayoutTabsTab = (props) => (\n  <React.Fragment>\n    {/*\n      When we're editing the tabs we stack each tab vertically,\n      which means there's no regular tab titles rendered.\n      So we conditionally render the tab title here, when editing. */}\n    {props.sitecoreContext &&\n      props.sitecoreContext.pageEditing && <Text tag=\"h5\" field={props.fields.title} />}\n\n    {/* React.Fragment tells React to not use any wrapping tag for the component */}\n    <RichText field={props.fields.content} />\n  </React.Fragment>\n);\n\nexport default withSitecoreContext()(StyleguideLayoutTabsTab);\n","import React from 'react';\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\nimport { translate } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates using the dictionary functionality and defining route data in\n * multiple languages.\n */\nconst StyleguideMultilingual = (props) => (\n  <StyleguideSpecimen {...props}>\n    <Text field={props.fields.sample} encode={false} tag=\"p\" />\n\n    <p>\n      This is a static dictionary entry from <code>/data/dictionary</code>:&nbsp;{props.t(\n        'styleguide-sample'\n      )}\n    </p>\n\n    <p>\n      <Link to=\"/en/styleguide\">Show in English</Link>\n      <br />\n      <Link to=\"/da-DK/styleguide\">Show in Danish</Link>\n    </p>\n\n    <p>The current language is: {props.i18n.language}</p>\n  </StyleguideSpecimen>\n);\n\n// the translate() _higher order component_ wraps the\n// component in another component and injects the `i18n`\n// and `t` props into it so that we can use them for translation.\n// Any component that wants to use translation will need to use this,\n// or the react-i18next render props API. See the react-i18next docs for more details.\nexport default translate()(StyleguideMultilingual);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates gaining access to route-level fields.\n * This technique builds on the Styleguide-SitecoreContext technique,\n * to also get the route level field data and make it editable.\n */\nconst StyleguideRouteFields = (props) => (\n  <StyleguideSpecimen {...props}>\n    <p>\n      Route level <code>pageTitle</code> field:{' '}\n      <Text field={props.sitecoreContext.route.fields.pageTitle} />\n    </p>\n    <p>\n      <Link to=\"/styleguide/custom-route-type\">Sample of using a custom route type</Link>\n    </p>\n  </StyleguideSpecimen>\n);\n\nexport default withSitecoreContext()(StyleguideRouteFields);\n","import React from 'react';\nimport { Placeholder, Text } from '@sitecore-jss/sitecore-jss-react';\n\n/**\n * Represents a category of styleguide specimens within the Styleguide-Layout.\n * Usage examples are added to the `styleguide-section` placeholder that this\n * exposes.\n */\nconst StyleguideSection = (props) => (\n  <div className=\"pt-3\" id={`i${props.rendering.uid.replace(/[{}]/g, '')}`}>\n    <Text className=\"border-bottom\" field={props.fields.heading} tag=\"h3\" />\n    <Placeholder name=\"jss-styleguide-section\" rendering={props.rendering} />\n  </div>\n);\n\nexport default StyleguideSection;\n","import React from 'react';\nimport { withSitecoreContext } from '@sitecore-jss/sitecore-jss-react';\nimport StyleguideSpecimen from '../Styleguide-Specimen';\n\n/**\n * Demonstrates gaining access to the route-level Sitecore Context from\n * within other components.\n */\nconst StyleguideSitecoreContext = (props) => (\n  <StyleguideSpecimen {...props}>\n    <p>The current Sitecore Context is...</p>\n    <pre style={{ maxHeight: '400px', overflow: 'scroll' }}>\n      {JSON.stringify(props.sitecoreContext, null, 2)}\n    </pre>\n  </StyleguideSpecimen>\n);\n\nexport default withSitecoreContext()(StyleguideSitecoreContext);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text, RichText, Image } from \"@sitecore-jss/sitecore-jss-react\";\n\nconst Welcome = ({ fields, copyright }) => (\n  <div>\n    <div>\n      <Image media={fields.logoImage} />\n    </div>\n    <div>\n      <Text tag=\"h1\" className=\"contentTitle\" field={fields.title} />\n      <RichText className=\"contentDescription\" field={fields.text} />\n    </div>\n    <div>\n      <hr className=\"divider\" />\n      {copyright}\n    </div>\n  </div>\n);\n\nWelcome.propTypes = {\n  fields: PropTypes.shape({\n    title: PropTypes.shape({\n      value: PropTypes.string,\n      editable: PropTypes.string\n    }),\n    text: PropTypes.shape({\n      value: PropTypes.string,\n      editable: PropTypes.string\n    }),\n    logoImage: PropTypes.shape({\n      value: PropTypes.shape({\n        src: PropTypes.string\n      }),\n      editable: PropTypes.string\n    })\n  }),\n  copyright: PropTypes.string\n};\n\nWelcome.defaultProps = {\n  copyright: \"Copyright Sitecore A/S\"\n};\n\nexport default Welcome;\n","/* eslint-disable */\n      // Do not edit this file, it is auto-generated at build time!\n      // See scripts/generate-component-factory.js to modify the generation of this file.\n      import ContentBlock from '../components/ContentBlock';\nimport Footer from '../components/Footer';\nimport FreeText from '../components/FreeText';\nimport GraphQLConnectedDemo from '../components/GraphQL-ConnectedDemo';\nimport GraphQLIntegratedDemo from '../components/GraphQL-IntegratedDemo';\nimport GraphQLLayout from '../components/GraphQL-Layout';\nimport Hero from '../components/Hero';\nimport JssCard from '../components/JssCard';\nimport JssImage from '../components/JssImage';\nimport Navigation from '../components/Navigation';\nimport Section from '../components/Section';\nimport StyleguideComponentParams from '../components/Styleguide-ComponentParams';\nimport StyleguideCustomRouteType from '../components/Styleguide-CustomRouteType';\nimport StyleguideFieldUsageCheckbox from '../components/Styleguide-FieldUsage-Checkbox';\nimport StyleguideFieldUsageContentList from '../components/Styleguide-FieldUsage-ContentList';\nimport StyleguideFieldUsageCustom from '../components/Styleguide-FieldUsage-Custom';\nimport StyleguideFieldUsageDate from '../components/Styleguide-FieldUsage-Date';\nimport StyleguideFieldUsageFile from '../components/Styleguide-FieldUsage-File';\nimport StyleguideFieldUsageImage from '../components/Styleguide-FieldUsage-Image';\nimport StyleguideFieldUsageItemLink from '../components/Styleguide-FieldUsage-ItemLink';\nimport StyleguideFieldUsageLink from '../components/Styleguide-FieldUsage-Link';\nimport StyleguideFieldUsageNumber from '../components/Styleguide-FieldUsage-Number';\nimport StyleguideFieldUsageRichText from '../components/Styleguide-FieldUsage-RichText';\nimport StyleguideFieldUsageText from '../components/Styleguide-FieldUsage-Text';\nimport StyleguideLayout from '../components/Styleguide-Layout';\nimport StyleguideLayoutReuse from '../components/Styleguide-Layout-Reuse';\nimport StyleguideLayoutTabs from '../components/Styleguide-Layout-Tabs';\nimport StyleguideLayoutTabsTab from '../components/Styleguide-Layout-Tabs-Tab';\nimport StyleguideMultilingual from '../components/Styleguide-Multilingual';\nimport StyleguideRouteFields from '../components/Styleguide-RouteFields';\nimport StyleguideSection from '../components/Styleguide-Section';\nimport StyleguideSitecoreContext from '../components/Styleguide-SitecoreContext';\nimport Welcome from '../components/Welcome';\n\n      const components = new Map();\n      components.set('ContentBlock', ContentBlock);\ncomponents.set('Footer', Footer);\ncomponents.set('FreeText', FreeText);\ncomponents.set('GraphQL-ConnectedDemo', GraphQLConnectedDemo);\ncomponents.set('GraphQL-IntegratedDemo', GraphQLIntegratedDemo);\ncomponents.set('GraphQL-Layout', GraphQLLayout);\ncomponents.set('Hero', Hero);\ncomponents.set('JssCard', JssCard);\ncomponents.set('JssImage', JssImage);\ncomponents.set('Navigation', Navigation);\ncomponents.set('Section', Section);\ncomponents.set('Styleguide-ComponentParams', StyleguideComponentParams);\ncomponents.set('Styleguide-CustomRouteType', StyleguideCustomRouteType);\ncomponents.set('Styleguide-FieldUsage-Checkbox', StyleguideFieldUsageCheckbox);\ncomponents.set('Styleguide-FieldUsage-ContentList', StyleguideFieldUsageContentList);\ncomponents.set('Styleguide-FieldUsage-Custom', StyleguideFieldUsageCustom);\ncomponents.set('Styleguide-FieldUsage-Date', StyleguideFieldUsageDate);\ncomponents.set('Styleguide-FieldUsage-File', StyleguideFieldUsageFile);\ncomponents.set('Styleguide-FieldUsage-Image', StyleguideFieldUsageImage);\ncomponents.set('Styleguide-FieldUsage-ItemLink', StyleguideFieldUsageItemLink);\ncomponents.set('Styleguide-FieldUsage-Link', StyleguideFieldUsageLink);\ncomponents.set('Styleguide-FieldUsage-Number', StyleguideFieldUsageNumber);\ncomponents.set('Styleguide-FieldUsage-RichText', StyleguideFieldUsageRichText);\ncomponents.set('Styleguide-FieldUsage-Text', StyleguideFieldUsageText);\ncomponents.set('Styleguide-Layout', StyleguideLayout);\ncomponents.set('Styleguide-Layout-Reuse', StyleguideLayoutReuse);\ncomponents.set('Styleguide-Layout-Tabs', StyleguideLayoutTabs);\ncomponents.set('Styleguide-Layout-Tabs-Tab', StyleguideLayoutTabsTab);\ncomponents.set('Styleguide-Multilingual', StyleguideMultilingual);\ncomponents.set('Styleguide-RouteFields', StyleguideRouteFields);\ncomponents.set('Styleguide-Section', StyleguideSection);\ncomponents.set('Styleguide-SitecoreContext', StyleguideSitecoreContext);\ncomponents.set('Welcome', Welcome);\n\n      export default function componentFactory(componentName) {\n        return components.get(componentName);\n      };\n    ","import { SitecoreContextFactory } from '@sitecore-jss/sitecore-jss-react';\n\n/*\n  The SitecoreContextFactory stores the current Sitecore context for the app.\n  For example, whether the page is currently being edited, or the current language.\n  Note that the export makes this essentially a singleton, so we can store state in it.\n\n  The Sitecore context is generally updated on route change (/src/index.js).\n  The `withSitecoreContext()` higher order component from `sitecore-jss-react`\n  can be used to access the context from within a component.\n*/\nexport default new SitecoreContextFactory();\n","/* eslint-disable */\n// Do not edit this file, it is auto-generated at build time!\n// See scripts/bootstrap.js to modify the generation of this file.\nexport default {\n  \"sitecoreApiKey\": \"{8ECF3C15-BE54-4558-AD9D-20A6DE2915E2}\",\n  \"sitecoreApiHost\": \"http://headless.local\",\n  \"jssAppName\": \"webinar\",\n  \"defaultLanguage\": \"en\",\n  \"graphQLEndpointPath\": \"/api/webinar\",\n  \"graphQLEndpoint\": \"http://headless.local/api/webinar?sc_apikey={8ECF3C15-BE54-4558-AD9D-20A6DE2915E2}\"\n};","import React from 'react';\nimport { Placeholder } from '@sitecore-jss/sitecore-jss-react';\nimport Helmet from 'react-helmet';\n\nimport './assets/scss/jss-headless.scss';\n\n// Using bootstrap is completely optional. It's used here to provide a clean layout for samples,\n// without needing extra CSS in the sample app. Remove it in package.json as well if it's removed here.\n// import 'bootstrap/dist/css/bootstrap.css';\n// import './assets/app.css';\n// import logo from './assets/sc_logo.png';\n\n/*\n  APP LAYOUT\n  This is where the app's HTML structure and root placeholders should be defined.\n\n  All routes share this root layout by default (this could be customized in RouteHandler),\n  but components added to inner placeholders are route-specific.\n*/\n\n// This is boilerplate navigation for sample purposes. Most apps should throw this away and use their own navigation implementation.\n// Most apps may also wish to use GraphQL for their navigation construction; this sample does not simply to support disconnected mode.\n// let Navigation = ({ t, i18n }) => (\n//     <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom\">\n//         <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n//             <NavLink to=\"/\" className=\"text-dark\">\n//                 <img alt=\"Sitecore\" />\n//             </NavLink>\n//         </h5>\n//         <nav className=\"my-2 my-md-0 mr-md-3\">\n//             <a\n//                 className=\"p-2 text-dark\"\n//                 href=\"https://jss.sitecore.net\"\n//                 target=\"_blank\"\n//                 rel=\"noopener noreferrer\"\n//             >\n//                 {t('Documentation')}\n//             </a>\n//             <NavLink to=\"/styleguide\" className=\"p-2 text-dark\">\n//                 {t('Styleguide')}\n//             </NavLink>\n//             <NavLink to=\"/graphql\" className=\"p-2 text-dark\">\n//                 {t('GraphQL')}\n//             </NavLink>\n//         </nav>\n//     </div>\n// );\n\n// inject dictionary props (`t`) into navigation so we can translate it\n// NOTE: using this is needed instead of using i18next directly to keep\n// the component state updated when i18n state (e.g. current language) changes\n// Navigation = translate()(Navigation);\n\nconst Layout = ({ route }) => (\n    <React.Fragment>\n        {/* react-helmet enables setting <head> contents, like title and OG meta tags */}\n        <Helmet>\n            <title>\n                {(route.fields && route.fields.pageTitle && route.fields.pageTitle.value) || 'Page'}\n            </title>\n        </Helmet>\n\n        {/* <Navigation /> */}\n\n        {/* root placeholder for the app, which we add components to using route data */}\n\n        <Placeholder name=\"jss-main\" rendering={route} />\n    </React.Fragment>\n);\n\nexport default Layout;\n","import React from 'react';\n\n// Renders a route-not-found message when no route is available from Sitecore\n// The JSS equivalent of a 404 Not Found page.\n\n// This is invoked from RouteHandler when Sitecore returns no valid route data.\n\nconst NotFound = (props) => <h1>Page not found</h1>;\n\nexport default NotFound;\n","import React from 'react';\nimport i18n from 'i18next';\nimport Helmet from 'react-helmet';\nimport { isExperienceEditorActive, dataApi } from '@sitecore-jss/sitecore-jss-react';\nimport SitecoreContextFactory from './lib/SitecoreContextFactory';\nimport config from './temp/config';\nimport Layout from './Layout';\nimport NotFound from './NotFound';\n\n// Dynamic route handler for Sitecore items.\n// Because JSS app routes are defined in Sitecore, traditional static React routing isn't enough -\n// we need to be able to load dynamic route data from Sitecore after the client side route changes.\n// So react-router delegates all route rendering to this handler, which attempts to get the right\n// route data from Sitecore - and if none exists, renders the not found component.\n\nlet ssrInitialState = null;\n\nexport default class RouteHandler extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      notFound: true,\n      routeData: ssrInitialState, // null when client-side rendering\n      defaultLanguage: config.defaultLanguage,\n    };\n\n    if (ssrInitialState && ssrInitialState.sitecore && ssrInitialState.sitecore.route) {\n      // set the initial sitecore context data if we got SSR initial state\n      SitecoreContextFactory.setSitecoreContext({\n        route: ssrInitialState.sitecore.route,\n        itemId: ssrInitialState.sitecore.route.itemId,\n        ...ssrInitialState.sitecore.context,\n      });\n    }\n\n    // route data from react-router - if route was resolved, it's not a 404\n    if (props.route !== null) {\n      this.state.notFound = false;\n    }\n\n    // if we have an initial SSR state, and that state doesn't have a valid route data,\n    // then this is a 404 route.\n    if (ssrInitialState && (!ssrInitialState.sitecore || !ssrInitialState.sitecore.route)) {\n      this.state.notFound = true;\n    }\n\n    // if we have an SSR state, and that state has language data, set the current language\n    // (this makes the language of content follow the Sitecore context language cookie)\n    // note that a route-based language (i.e. /de-DE) will override this default; this is for home.\n    if (ssrInitialState && ssrInitialState.context && ssrInitialState.context.language) {\n      this.state.defaultLanguage = ssrInitialState.context.language;\n    }\n\n    // once we initialize the route handler, we've \"used up\" the SSR data,\n    // if it existed, so we want to clear it now that it's in react state.\n    // future route changes that might destroy/remount this component should ignore any SSR data.\n    // EXCEPTION: Unless we are still SSR-ing. Because SSR can re-render the component twice\n    // (once to find GraphQL queries that need to run, the second time to refresh the view with\n    // GraphQL query results)\n    // We test for SSR by checking for Node-specific process.env variable.\n    if (typeof window !== 'undefined') {\n      ssrInitialState = null;\n    }\n\n    this.componentIsMounted = false;\n    this.languageIsChanging = false;\n\n    // tell i18next to sync its current language with the route language\n    this.updateLanguage();\n  }\n\n  componentDidMount() {\n    // if no existing routeData is present (from SSR), get Layout Service fetching the route data\n    if (!this.state.routeData) {\n      this.updateRouteData();\n    }\n\n    this.componentIsMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.componentIsMounted = false;\n  }\n\n  /**\n   * Loads route data from Sitecore Layout Service into state.routeData\n   */\n  updateRouteData() {\n    let sitecoreRoutePath = this.props.route.match.params.sitecoreRoute || '/';\n    if (!sitecoreRoutePath.startsWith('/')) {\n      sitecoreRoutePath = `/${sitecoreRoutePath}`;\n    }\n\n    const language = this.props.route.match.params.lang || this.state.defaultLanguage;\n\n    // get the route data for the new route\n    getRouteData(sitecoreRoutePath, language).then((routeData) => {\n      if (routeData !== null) {\n        // set the sitecore context data and push the new route\n        SitecoreContextFactory.setSitecoreContext({\n          route: routeData.sitecore.route,\n          itemId: routeData.sitecore.route.itemId,\n          ...routeData.sitecore.context,\n        });\n        this.setState({ routeData, notFound: false });\n      } else {\n        this.setState({ notFound: true });\n      }\n    });\n  }\n\n  /**\n   * Updates the current app language to match the route data.\n   */\n  updateLanguage() {\n    const newLanguage = this.props.route.match.params.lang || this.state.defaultLanguage;\n\n    if (i18n.language !== newLanguage) {\n      this.languageIsChanging = true;\n\n      i18n.changeLanguage(newLanguage, () => {\n        this.languageIsChanging = false;\n\n        // if the component is not mounted, we don't care\n        // (next time it mounts, it will render with the right language context)\n        if (this.componentIsMounted) {\n          // after we change the i18n language, we need to force-update React,\n          // since otherwise React won't know that the dictionary has changed\n          // because it is stored in i18next state not React state\n          this.forceUpdate();\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    const existingRoute = previousProps.route.match.url;\n    const newRoute = this.props.route.match.url;\n\n    // don't change state (refetch route data) if the route has not changed\n    if (existingRoute === newRoute) {\n      return;\n    }\n\n    // if in experience editor - force reload instead of route data update\n    // avoids confusing Sitecore's editing JS\n    if (isExperienceEditorActive()) {\n      window.location.assign(newRoute);\n      return;\n    }\n\n    this.updateLanguage();\n    this.updateRouteData();\n  }\n\n  render() {\n    const { notFound, routeData } = this.state;\n\n    // no route data for the current route in Sitecore - show not found component.\n    // Note: this is client-side only 404 handling. Server-side 404 handling is the responsibility\n    // of the server being used (i.e. node-express-ssr and Sitecore intergrated rendering know how to send 404 status codes).\n    if (notFound) {\n      return (\n        <div>\n          <Helmet>\n            <title>{i18n.t('Page not found')}</title>\n          </Helmet>\n          <NotFound />\n        </div>\n      );\n    }\n\n    // Don't render anything if the route data or dictionary data is not fully loaded yet.\n    // This is a good place for a \"Loading\" component, if one is needed.\n    if (!routeData || this.languageIsChanging) {\n      return null;\n    }\n\n    // Render the app's root structural layout\n    return <Layout route={routeData.sitecore.route} />;\n  }\n}\n\n/**\n * Sets the initial state provided by server-side rendering.\n * Setting this state will bypass initial route data fetch calls.\n * @param {object} ssrState\n */\nexport function setServerSideRenderingState(ssrState) {\n  ssrInitialState = ssrState;\n}\n\n/**\n * Gets route data from Sitecore. This data is used to construct the component layout for a JSS route.\n * @param {string} route Route path to get data for (e.g. /about)\n * @param {string} language Language to get route data in (content language, e.g. 'en')\n * @param {dataApi.LayoutServiceRequestOptions} options Layout service fetch options\n */\nfunction getRouteData(route, language, options = {}) {\n  const fetchOptions = {\n    layoutServiceConfig: { host: config.sitecoreApiHost },\n    querystringParams: { sc_lang: language, sc_apikey: config.sitecoreApiKey },\n    requestConfig: options,\n  };\n\n  return dataApi.fetchRouteData(route, fetchOptions).catch((error) => {\n    console.error('Route data fetch error', error);\n    return null;\n  });\n}\n","import React from 'react';\nimport { SitecoreContext } from '@sitecore-jss/sitecore-jss-react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport componentFactory from './temp/componentFactory';\nimport SitecoreContextFactory from './lib/SitecoreContextFactory';\nimport RouteHandler from './RouteHandler';\n\n// This is the main JSX entry point of the app invoked by the renderer (server or client rendering).\n// By default the app's normal rendering is delegated to <RouteHandler> that handles the loading of JSS route data.\n\n// support languages in the URL prefix\n// e.g. /da-DK/path, or /en/path, or /path\nexport const routePatterns = [\n  '/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*',\n  '/:lang([a-z]{2})/:sitecoreRoute*',\n  '/:sitecoreRoute*',\n];\n\n// wrap the app with:\n// ApolloProvider: provides an instance of Apollo GraphQL client to the app to make Connected GraphQL queries.\n//    Not needed if not using connected GraphQL.\n// SitecoreContext: provides component resolution and context services via withSitecoreContext\n// Router: provides a basic routing setup that will resolve Sitecore item routes and allow for language URL prefixes.\nconst AppRoot = ({ path, Router, graphQLClient }) => {\n  const routeRenderFunction = (props) => <RouteHandler route={props} />;\n  return (\n    <ApolloProvider client={graphQLClient}>\n      <SitecoreContext componentFactory={componentFactory} contextFactory={SitecoreContextFactory}>\n        <Router location={path} context={{}}>\n          <Switch>\n            {routePatterns.map((routePattern) => (\n              <Route key={routePattern} path={routePattern} render={routeRenderFunction} />\n            ))}\n          </Switch>\n        </Router>\n      </SitecoreContext>\n    </ApolloProvider>\n  );\n};\n\nexport default AppRoot;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport AppRoot from './AppRoot';\nimport { setServerSideRenderingState } from './RouteHandler';\nimport GraphQLClientFactory from './lib/GraphQLClientFactory';\nimport config from './temp/config';\nimport i18ninit from './i18n';\n\n/* eslint-disable no-underscore-dangle */\n\nlet renderFunction = ReactDOM.render;\n\n/*\n  SSR Data\n  If we're running in a server-side rendering scenario,\n  the server will provide the window.__JSS_STATE__ object\n  for us to acquire the initial state to run with on the client.\n\n  This enables us to skip a network request to load up the layout data.\n\n  SSR is initiated from /server/server.js.\n*/\nif (window.__JSS_STATE__) {\n  // push the initial SSR state into the route handler, where it will be used\n  setServerSideRenderingState(window.__JSS_STATE__);\n\n  // when React initializes from a SSR-based initial state, you need to render with `hydrate` instead of `render`\n  renderFunction = ReactDOM.hydrate;\n}\n\n/*\n  GraphQL Data\n  The Apollo Client needs to be initialized to make GraphQL available to the JSS app.\n  Not using GraphQL? Remove this, and the ApolloContext from `AppRoot`.\n*/\n// Apollo supports SSR of GraphQL queries, so like JSS SSR, it has an object we can pre-hydrate the client cache from\n// to avoid needing to re-run GraphQL queries after the SSR page loads\nconst initialGraphQLState =\n  window.__JSS_STATE__ && window.__JSS_STATE__.APOLLO_STATE\n    ? window.__JSS_STATE__.APOLLO_STATE\n    : null;\n\nconst graphQLClient = GraphQLClientFactory(config.graphQLEndpoint, false, initialGraphQLState);\n\n/*\n  App Rendering\n*/\n// initialize the dictionary, then render the app\n// note: if not making a multlingual app, the dictionary init can be removed.\ni18ninit().then(() => {\n  // HTML element to place the app into\n  const rootElement = document.getElementById('root');\n\n  renderFunction(\n    <AppRoot\n      path={window.location.pathname}\n      Router={BrowserRouter}\n      graphQLClient={graphQLClient}\n    />,\n    rootElement\n  );\n});\n","/* eslint-disable import/first */\n\nimport 'isomorphic-fetch';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\n\n/*\n  INTROSPECTION DATA\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\n  This enables the Apollo cache to process fragments on interface types correctly.\n  If this file does not exist, you may need to run the `jss graphql:update` script.\n*/\nimport introspectionQueryResultData from '../temp/GraphQLFragmentTypes.json';\n\n/*\n  QUERY LINK SELECTION\n  A link is transport which GraphQL queries are pushed across.\n  You have many choices.\n  See the apollo-link documentation for more details.\n\n  NOTE: to use Sitecore Experience Editor it is essential that your\n  link passes cookies along with requests (credentials: 'include').\n*/\n\n// choose between a basic HTTP link to run queries...\n// import { createHttpLink } from 'apollo-link-http';\n// const link = createHttpLink({ uri: endpoint, credentials: 'include' });\n\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\nimport { BatchHttpLink } from 'apollo-link-batch-http';\n\n// ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\n// APQ + batched, or APQ + http links for example.\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\n\nexport default function(endpoint, ssr, initialCacheState) {\n  /* HTTP link selection: default to batched + APQ */\n  const link = createPersistedQueryLink().concat(\n    new BatchHttpLink({ uri: endpoint, credentials: 'include' })\n  );\n\n  const cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n      introspectionQueryResultData,\n    }),\n  });\n\n  return new ApolloClient({\n    ssrMode: ssr,\n    ssrForceFetchDelay: 100,\n    link,\n    cache: cache.restore(initialCacheState),\n  });\n}\n","import i18n from 'i18next';\nimport fetchBackend from 'i18next-fetch-backend';\nimport { reactI18nextModule } from 'react-i18next';\nimport config from './temp/config';\n\n/**\n * Initializes the i18next library to provide a translation dictionary to the app.\n * If your app is not multilingual, this file and references to it can be removed.\n * Elsewhere in the app to use the dictionary `import { t } from 'i18next'; ... t('key')`\n * @param {string} language Optional, the initial language. Only used for SSR; otherwise language set in RouteHandler.\n * @param {*} dictionary Optional, the dictionary to load. Only used for SSR; otherwise, the dictionary is loaded via JSS dictionary service.\n */\nexport default function i18nInit(language, dictionary) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      debug: false,\n      lng: language,\n      fallbackLng: false, // fallback to keys\n      load: 'currentOnly', // e.g. don't load 'es' when requesting 'es-MX' -- Sitecore config should handle this\n      useCookie: false, // using URLs and Sitecore to store language context, don't need a cookie\n\n      interpolation: {\n        escapeValue: false, // not needed for react\n      },\n    };\n\n    if (dictionary) {\n      // if we got dictionary passed, that means we're in a SSR context with a server-provided dictionary\n      // so we do not want a backend, because we already know all possible keys\n      options.resources = {};\n      options.resources[language] = {\n        translation: dictionary,\n      };\n\n      i18n.use(reactI18nextModule).init(options, (error) => {\n        if (error) reject(error);\n        resolve();\n      });\n    } else {\n      // We're running client-side, so we get translation data from the Sitecore dictionary API using fetch backend\n      // For higher performance (but less simplicity), consider adding the i18n chained backend to a local cache option like the local storage backend.\n\n      // eslint-disable-next-line prettier/prettier\n      const dictionaryServicePath = `${config.sitecoreApiHost}/sitecore/api/jss/dictionary/${config.jssAppName}/{{lng}}?sc_apikey=${config.sitecoreApiKey}`;\n\n      options.backend = {\n        loadPath: dictionaryServicePath,\n        parse: (data) => {\n          const parsedData = JSON.parse(data);\n          if (parsedData.phrases) {\n            return parsedData.phrases;\n          }\n          return parsedData;\n        },\n      };\n\n      i18n\n        .use(fetchBackend)\n        .use(reactI18nextModule)\n        .init(options, (error) => {\n          if (error) reject(error);\n\n          resolve();\n        });\n    }\n  });\n}\n"],"sourceRoot":""}